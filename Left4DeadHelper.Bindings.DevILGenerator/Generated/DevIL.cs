// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace DevIL
{
    /// <summary>Basic Palette struct</summary>
    /// <summary>
    /// <para>The Fundamental Image structure</para>
    /// <para>Every bit of information about an image is stored in this internal structure.</para>
    /// </summary>
    /// <summary>Basic Palette struct</summary>
    public unsafe partial class ILpal : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr Palette;
            internal uint PalSize;
            internal uint PalType;

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "??0ILpal@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DevIL.ILpal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DevIL.ILpal>();

        protected bool __ownsNativeInstance;

        internal static ILpal __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new ILpal(native.ToPointer(), skipVTables);
        }

        internal static ILpal __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (ILpal)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static ILpal __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ILpal(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ILpal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ILpal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public ILpal()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DevIL.ILpal.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ILpal(global::DevIL.ILpal _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DevIL.ILpal.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DevIL.ILpal.__Internal*) __Instance) = *((global::DevIL.ILpal.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte* Palette
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->Palette;
            }

            set
            {
                ((__Internal*)__Instance)->Palette = (__IntPtr) value;
            }
        }

        public uint PalSize
        {
            get
            {
                return ((__Internal*)__Instance)->PalSize;
            }

            set
            {
                ((__Internal*)__Instance)->PalSize = value;
            }
        }

        public uint PalType
        {
            get
            {
                return ((__Internal*)__Instance)->PalType;
            }

            set
            {
                ((__Internal*)__Instance)->PalType = value;
            }
        }
    }

    /// <summary>
    /// <para>The Fundamental Image structure</para>
    /// <para>Every bit of information about an image is stored in this internal structure.</para>
    /// </summary>
    public unsafe partial class ILimage : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 168)]
        public partial struct __Internal
        {
            internal uint Width;
            internal uint Height;
            internal uint Depth;
            internal byte Bpp;
            internal byte Bpc;
            internal uint Bps;
            internal __IntPtr Data;
            internal uint SizeOfData;
            internal uint SizeOfPlane;
            internal uint Format;
            internal uint Type;
            internal uint Origin;
            internal global::DevIL.ILpal.__Internal Pal;
            internal uint Duration;
            internal uint CubeFlags;
            internal __IntPtr Mipmaps;
            internal __IntPtr Next;
            internal __IntPtr Faces;
            internal __IntPtr Layers;
            internal __IntPtr AnimList;
            internal uint AnimSize;
            internal __IntPtr Profile;
            internal uint ProfileSize;
            internal uint OffX;
            internal uint OffY;
            internal __IntPtr DxtcData;
            internal uint DxtcFormat;
            internal uint DxtcSize;

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "??0ILimage@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DevIL.ILimage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DevIL.ILimage>();

        protected bool __ownsNativeInstance;

        internal static ILimage __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new ILimage(native.ToPointer(), skipVTables);
        }

        internal static ILimage __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (ILimage)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static ILimage __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ILimage(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ILimage(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ILimage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public ILimage()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DevIL.ILimage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ILimage(global::DevIL.ILimage _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DevIL.ILimage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DevIL.ILimage.__Internal*) __Instance) = *((global::DevIL.ILimage.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->Height;
            }

            set
            {
                ((__Internal*)__Instance)->Height = value;
            }
        }

        public uint Depth
        {
            get
            {
                return ((__Internal*)__Instance)->Depth;
            }

            set
            {
                ((__Internal*)__Instance)->Depth = value;
            }
        }

        public byte Bpp
        {
            get
            {
                return ((__Internal*)__Instance)->Bpp;
            }

            set
            {
                ((__Internal*)__Instance)->Bpp = value;
            }
        }

        public byte Bpc
        {
            get
            {
                return ((__Internal*)__Instance)->Bpc;
            }

            set
            {
                ((__Internal*)__Instance)->Bpc = value;
            }
        }

        public uint Bps
        {
            get
            {
                return ((__Internal*)__Instance)->Bps;
            }

            set
            {
                ((__Internal*)__Instance)->Bps = value;
            }
        }

        public byte* Data
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->Data;
            }

            set
            {
                ((__Internal*)__Instance)->Data = (__IntPtr) value;
            }
        }

        public uint SizeOfData
        {
            get
            {
                return ((__Internal*)__Instance)->SizeOfData;
            }

            set
            {
                ((__Internal*)__Instance)->SizeOfData = value;
            }
        }

        public uint SizeOfPlane
        {
            get
            {
                return ((__Internal*)__Instance)->SizeOfPlane;
            }

            set
            {
                ((__Internal*)__Instance)->SizeOfPlane = value;
            }
        }

        public uint Format
        {
            get
            {
                return ((__Internal*)__Instance)->Format;
            }

            set
            {
                ((__Internal*)__Instance)->Format = value;
            }
        }

        public uint Type
        {
            get
            {
                return ((__Internal*)__Instance)->Type;
            }

            set
            {
                ((__Internal*)__Instance)->Type = value;
            }
        }

        public uint Origin
        {
            get
            {
                return ((__Internal*)__Instance)->Origin;
            }

            set
            {
                ((__Internal*)__Instance)->Origin = value;
            }
        }

        public global::DevIL.ILpal Pal
        {
            get
            {
                return global::DevIL.ILpal.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Pal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Pal = *(global::DevIL.ILpal.__Internal*) value.__Instance;
            }
        }

        public uint Duration
        {
            get
            {
                return ((__Internal*)__Instance)->Duration;
            }

            set
            {
                ((__Internal*)__Instance)->Duration = value;
            }
        }

        public uint CubeFlags
        {
            get
            {
                return ((__Internal*)__Instance)->CubeFlags;
            }

            set
            {
                ((__Internal*)__Instance)->CubeFlags = value;
            }
        }

        public global::DevIL.ILimage Mipmaps
        {
            get
            {
                var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(((__Internal*)__Instance)->Mipmaps, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->Mipmaps = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::DevIL.ILimage Next
        {
            get
            {
                var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(((__Internal*)__Instance)->Next, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->Next = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::DevIL.ILimage Faces
        {
            get
            {
                var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(((__Internal*)__Instance)->Faces, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->Faces = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::DevIL.ILimage Layers
        {
            get
            {
                var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(((__Internal*)__Instance)->Layers, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->Layers = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint* AnimList
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->AnimList;
            }

            set
            {
                ((__Internal*)__Instance)->AnimList = (__IntPtr) value;
            }
        }

        public uint AnimSize
        {
            get
            {
                return ((__Internal*)__Instance)->AnimSize;
            }

            set
            {
                ((__Internal*)__Instance)->AnimSize = value;
            }
        }

        public __IntPtr Profile
        {
            get
            {
                return ((__Internal*)__Instance)->Profile;
            }

            set
            {
                ((__Internal*)__Instance)->Profile = (__IntPtr) value;
            }
        }

        public uint ProfileSize
        {
            get
            {
                return ((__Internal*)__Instance)->ProfileSize;
            }

            set
            {
                ((__Internal*)__Instance)->ProfileSize = value;
            }
        }

        public uint OffX
        {
            get
            {
                return ((__Internal*)__Instance)->OffX;
            }

            set
            {
                ((__Internal*)__Instance)->OffX = value;
            }
        }

        public uint OffY
        {
            get
            {
                return ((__Internal*)__Instance)->OffY;
            }

            set
            {
                ((__Internal*)__Instance)->OffY = value;
            }
        }

        public byte* DxtcData
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->DxtcData;
            }

            set
            {
                ((__Internal*)__Instance)->DxtcData = (__IntPtr) value;
            }
        }

        public uint DxtcFormat
        {
            get
            {
                return ((__Internal*)__Instance)->DxtcFormat;
            }

            set
            {
                ((__Internal*)__Instance)->DxtcFormat = value;
            }
        }

        public uint DxtcSize
        {
            get
            {
                return ((__Internal*)__Instance)->DxtcSize;
            }

            set
            {
                ((__Internal*)__Instance)->DxtcSize = value;
            }
        }
    }

    public unsafe partial class devil_internal_exports
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ialloc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Ialloc(ulong Size);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ifree", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Ifree(__IntPtr Ptr);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "icalloc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Icalloc(ulong Size, ulong Num);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetCurImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IlGetCurImage();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetCurImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlSetCurImage(__IntPtr Image);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlSetError(uint Error);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetPal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlSetPal(__IntPtr Pal);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetBppFormat", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlGetBppFormat(uint Format);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetFormatBpp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlGetFormatBpp(byte Bpp);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetBpcType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlGetBpcType(uint Type);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetTypeBpc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlGetTypeBpc(byte Bpc);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetBppPal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlGetBppPal(uint PalType);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetPalBaseType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlGetPalBaseType(uint PalType);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilNextPower2", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlNextPower2(uint Num);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilTypeFromExt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlTypeFromExt([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilReplaceCurImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlReplaceCurImage(__IntPtr Image);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "iMemSwap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IMemSwap(byte* _0, byte* _1, uint _2);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "iBindImageTemp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IBindImageTemp();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilClearImage_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlClearImage(__IntPtr Image);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilCloseImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlCloseImage(__IntPtr Image);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilClosePal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlClosePal(__IntPtr Palette);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "iCopyPal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ICopyPal();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilCopyImageAttr", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlCopyImageAttr(__IntPtr Dest, __IntPtr Src);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilCopyImage_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IlCopyImage(__IntPtr Src);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetClear", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlGetClear(__IntPtr Colours, uint Format, uint Type);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetCurName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlGetCurName();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilIsValidPal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlIsValidPal(__IntPtr Palette);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilNewImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IlNewImage(uint Width, uint Height, uint Depth, byte Bpp, byte Bpc);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilNewImageFull", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IlNewImageFull(uint Width, uint Height, uint Depth, byte Bpp, uint Format, uint Type, __IntPtr Data);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilInitImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlInitImage(__IntPtr Image, uint Width, uint Height, uint Depth, byte Bpp, uint Format, uint Type, __IntPtr Data);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilResizeImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlResizeImage(__IntPtr Image, uint Width, uint Height, uint Depth, byte Bpp, byte Bpc);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilTexImage_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlTexImage(__IntPtr Image, uint Width, uint Height, uint Depth, byte Bpp, uint Format, uint Type, __IntPtr Data);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilTexImageSurface_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlTexImageSurface(__IntPtr Image, uint Width, uint Height, uint Depth, byte Bpp, uint Format, uint Type, __IntPtr Data);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilTexSubImage_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlTexSubImage(__IntPtr Image, __IntPtr Data);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilConvertBuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IlConvertBuffer(uint SizeOfData, uint SrcFormat, uint DestFormat, uint SrcType, uint DestType, __IntPtr SrcPal, __IntPtr Buffer);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "iConvertImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IConvertImage(__IntPtr Image, uint DestFormat, uint DestType);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "iConvertPal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IConvertPal(__IntPtr Pal, uint DestFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "iGetFlipped", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* IGetFlipped(__IntPtr Image);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "iMirror", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IMirror();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "iFlipBuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IFlipBuffer(byte* buff, uint depth, uint line_size, uint line_num);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "iFlipNewBuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* IFlipNewBuffer(byte* buff, uint depth, uint line_size, uint line_num);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "iGetIntegervImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IGetIntegervImage(__IntPtr Image, uint Mode, int* Param);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluRotate_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IluRotate(__IntPtr Image, float Angle);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluRotate3D_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IluRotate3D_(__IntPtr Image, float x, float y, float z, float Angle);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluScale_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IluScale(__IntPtr Image, uint Width, uint Height, uint Depth);
        }

        public static __IntPtr Ialloc(ulong Size)
        {
            var __ret = __Internal.Ialloc(Size);
            return __ret;
        }

        public static void Ifree(__IntPtr Ptr)
        {
            __Internal.Ifree(Ptr);
        }

        public static __IntPtr Icalloc(ulong Size, ulong Num)
        {
            var __ret = __Internal.Icalloc(Size, Num);
            return __ret;
        }

        public static global::DevIL.ILimage IlGetCurImage()
        {
            var __ret = __Internal.IlGetCurImage();
            var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void IlSetCurImage(global::DevIL.ILimage Image)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            __Internal.IlSetCurImage(__arg0);
        }

        public static void IlSetError(uint Error)
        {
            __Internal.IlSetError(Error);
        }

        public static void IlSetPal(global::DevIL.ILpal Pal)
        {
            var __arg0 = Pal is null ? __IntPtr.Zero : Pal.__Instance;
            __Internal.IlSetPal(__arg0);
        }

        public static byte IlGetBppFormat(uint Format)
        {
            var __ret = __Internal.IlGetBppFormat(Format);
            return __ret;
        }

        public static uint IlGetFormatBpp(byte Bpp)
        {
            var __ret = __Internal.IlGetFormatBpp(Bpp);
            return __ret;
        }

        public static byte IlGetBpcType(uint Type)
        {
            var __ret = __Internal.IlGetBpcType(Type);
            return __ret;
        }

        public static uint IlGetTypeBpc(byte Bpc)
        {
            var __ret = __Internal.IlGetTypeBpc(Bpc);
            return __ret;
        }

        public static byte IlGetBppPal(uint PalType)
        {
            var __ret = __Internal.IlGetBppPal(PalType);
            return __ret;
        }

        public static uint IlGetPalBaseType(uint PalType)
        {
            var __ret = __Internal.IlGetPalBaseType(PalType);
            return __ret;
        }

        public static uint IlNextPower2(uint Num)
        {
            var __ret = __Internal.IlNextPower2(Num);
            return __ret;
        }

        public static uint IlTypeFromExt(string FileName)
        {
            var __ret = __Internal.IlTypeFromExt(FileName);
            return __ret;
        }

        public static void IlReplaceCurImage(global::DevIL.ILimage Image)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            __Internal.IlReplaceCurImage(__arg0);
        }

        public static void IMemSwap(byte* _0, byte* _1, uint _2)
        {
            __Internal.IMemSwap(_0, _1, _2);
        }

        public static void IBindImageTemp()
        {
            __Internal.IBindImageTemp();
        }

        public static byte IlClearImage(global::DevIL.ILimage Image)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IlClearImage(__arg0);
            return __ret;
        }

        public static void IlCloseImage(global::DevIL.ILimage Image)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            __Internal.IlCloseImage(__arg0);
        }

        public static void IlClosePal(global::DevIL.ILpal Palette)
        {
            var __arg0 = Palette is null ? __IntPtr.Zero : Palette.__Instance;
            __Internal.IlClosePal(__arg0);
        }

        public static global::DevIL.ILpal ICopyPal()
        {
            var __ret = __Internal.ICopyPal();
            var __result0 = global::DevIL.ILpal.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static byte IlCopyImageAttr(global::DevIL.ILimage Dest, global::DevIL.ILimage Src)
        {
            var __arg0 = Dest is null ? __IntPtr.Zero : Dest.__Instance;
            var __arg1 = Src is null ? __IntPtr.Zero : Src.__Instance;
            var __ret = __Internal.IlCopyImageAttr(__arg0, __arg1);
            return __ret;
        }

        public static global::DevIL.ILimage IlCopyImage(global::DevIL.ILimage Src)
        {
            var __arg0 = Src is null ? __IntPtr.Zero : Src.__Instance;
            var __ret = __Internal.IlCopyImage(__arg0);
            var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void IlGetClear(__IntPtr Colours, uint Format, uint Type)
        {
            __Internal.IlGetClear(Colours, Format, Type);
        }

        public static uint IlGetCurName()
        {
            var __ret = __Internal.IlGetCurName();
            return __ret;
        }

        public static byte IlIsValidPal(global::DevIL.ILpal Palette)
        {
            var __arg0 = Palette is null ? __IntPtr.Zero : Palette.__Instance;
            var __ret = __Internal.IlIsValidPal(__arg0);
            return __ret;
        }

        public static global::DevIL.ILimage IlNewImage(uint Width, uint Height, uint Depth, byte Bpp, byte Bpc)
        {
            var __ret = __Internal.IlNewImage(Width, Height, Depth, Bpp, Bpc);
            var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::DevIL.ILimage IlNewImageFull(uint Width, uint Height, uint Depth, byte Bpp, uint Format, uint Type, __IntPtr Data)
        {
            var __ret = __Internal.IlNewImageFull(Width, Height, Depth, Bpp, Format, Type, Data);
            var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static byte IlInitImage(global::DevIL.ILimage Image, uint Width, uint Height, uint Depth, byte Bpp, uint Format, uint Type, __IntPtr Data)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IlInitImage(__arg0, Width, Height, Depth, Bpp, Format, Type, Data);
            return __ret;
        }

        public static byte IlResizeImage(global::DevIL.ILimage Image, uint Width, uint Height, uint Depth, byte Bpp, byte Bpc)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IlResizeImage(__arg0, Width, Height, Depth, Bpp, Bpc);
            return __ret;
        }

        public static byte IlTexImage(global::DevIL.ILimage Image, uint Width, uint Height, uint Depth, byte Bpp, uint Format, uint Type, __IntPtr Data)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IlTexImage(__arg0, Width, Height, Depth, Bpp, Format, Type, Data);
            return __ret;
        }

        public static byte IlTexImageSurface(global::DevIL.ILimage Image, uint Width, uint Height, uint Depth, byte Bpp, uint Format, uint Type, __IntPtr Data)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IlTexImageSurface(__arg0, Width, Height, Depth, Bpp, Format, Type, Data);
            return __ret;
        }

        public static byte IlTexSubImage(global::DevIL.ILimage Image, __IntPtr Data)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IlTexSubImage(__arg0, Data);
            return __ret;
        }

        public static __IntPtr IlConvertBuffer(uint SizeOfData, uint SrcFormat, uint DestFormat, uint SrcType, uint DestType, global::DevIL.ILpal SrcPal, __IntPtr Buffer)
        {
            var __arg5 = SrcPal is null ? __IntPtr.Zero : SrcPal.__Instance;
            var __ret = __Internal.IlConvertBuffer(SizeOfData, SrcFormat, DestFormat, SrcType, DestType, __arg5, Buffer);
            return __ret;
        }

        public static global::DevIL.ILimage IConvertImage(global::DevIL.ILimage Image, uint DestFormat, uint DestType)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IConvertImage(__arg0, DestFormat, DestType);
            var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::DevIL.ILpal IConvertPal(global::DevIL.ILpal Pal, uint DestFormat)
        {
            var __arg0 = Pal is null ? __IntPtr.Zero : Pal.__Instance;
            var __ret = __Internal.IConvertPal(__arg0, DestFormat);
            var __result0 = global::DevIL.ILpal.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static byte* IGetFlipped(global::DevIL.ILimage Image)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IGetFlipped(__arg0);
            return __ret;
        }

        public static byte IMirror()
        {
            var __ret = __Internal.IMirror();
            return __ret;
        }

        public static void IFlipBuffer(byte* buff, uint depth, uint line_size, uint line_num)
        {
            __Internal.IFlipBuffer(buff, depth, line_size, line_num);
        }

        public static byte* IFlipNewBuffer(byte* buff, uint depth, uint line_size, uint line_num)
        {
            var __ret = __Internal.IFlipNewBuffer(buff, depth, line_size, line_num);
            return __ret;
        }

        public static void IGetIntegervImage(global::DevIL.ILimage Image, uint Mode, ref int Param)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            fixed (int* __Param2 = &Param)
            {
                var __arg2 = __Param2;
                __Internal.IGetIntegervImage(__arg0, Mode, __arg2);
            }
        }

        public static global::DevIL.ILimage IluRotate(global::DevIL.ILimage Image, float Angle)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IluRotate(__arg0, Angle);
            var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::DevIL.ILimage IluRotate3D_(global::DevIL.ILimage Image, float x, float y, float z, float Angle)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IluRotate3D_(__arg0, x, y, z, Angle);
            var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::DevIL.ILimage IluScale(global::DevIL.ILimage Image, uint Width, uint Height, uint Depth)
        {
            var __arg0 = Image is null ? __IntPtr.Zero : Image.__Instance;
            var __ret = __Internal.IluScale(__arg0, Width, Height, Depth);
            var __result0 = global::DevIL.ILimage.__GetOrCreateInstance(__ret, false);
            return __result0;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void FCloseRProc(__IntPtr __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate byte FEofProc(__IntPtr __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int FGetcProc(__IntPtr __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr FOpenRProc([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int FReadProc(__IntPtr __0, uint __1, uint __2, __IntPtr __3);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int FSeekRProc(__IntPtr __0, int __1, int __2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int FTellRProc(__IntPtr __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void FCloseWProc(__IntPtr __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr FOpenWProc([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int FPutcProc(byte __0, __IntPtr __1);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int FSeekWProc(__IntPtr __0, int __1, int __2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int FTellWProc(__IntPtr __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int FWriteProc(__IntPtr __0, uint __1, uint __2, __IntPtr __3);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr MAlloc(ulong __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void MFree(__IntPtr __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint IL_LOADPROC([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string __0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate uint IL_SAVEPROC([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string __0);

    public unsafe partial class il
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilActiveFace", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlActiveFace(uint Number);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilActiveImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlActiveImage(uint Number);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilActiveLayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlActiveLayer(uint Number);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilActiveMipmap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlActiveMipmap(uint Number);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilApplyPal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlApplyPal([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilApplyProfile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlApplyProfile(sbyte* InProfile, sbyte* OutProfile);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilBindImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlBindImage(uint Image);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilBlit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlBlit(uint Source, int DestX, int DestY, int DestZ, uint SrcX, uint SrcY, uint SrcZ, uint Width, uint Height, uint Depth);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilClampNTSC", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlClampNTSC();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilClearColour", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlClearColour(float Red, float Green, float Blue, float Alpha);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilClearImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlClearImage();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilCloneCurImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlCloneCurImage();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilCompressDXT", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* IlCompressDXT(byte* Data, uint Width, uint Height, uint Depth, uint DXTCFormat, uint* DXTCSize);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilCompressFunc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlCompressFunc(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilConvertImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlConvertImage(uint DestFormat, uint DestType);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilConvertPal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlConvertPal(uint DestFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilCopyImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlCopyImage(uint Src);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilCopyPixels", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlCopyPixels(uint XOff, uint YOff, uint ZOff, uint Width, uint Height, uint Depth, uint Format, uint Type, __IntPtr Data);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilCreateSubImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlCreateSubImage(uint Type, uint Num);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilDefaultImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlDefaultImage();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilDeleteImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlDeleteImage(uint Num);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilDeleteImages", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlDeleteImages(ulong Num, uint* Images);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilDetermineType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlDetermineType([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilDetermineTypeF", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlDetermineTypeF(__IntPtr File);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilDetermineTypeL", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlDetermineTypeL(__IntPtr Lump, uint Size);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilDisable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlDisable(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilDxtcDataToImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlDxtcDataToImage();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilDxtcDataToSurface", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlDxtcDataToSurface();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilEnable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlEnable(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilFlipSurfaceDxtcData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlFlipSurfaceDxtcData();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilFormatFunc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlFormatFunc(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGenImages", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlGenImages(ulong Num, uint* Images);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGenImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlGenImage();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetAlpha", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* IlGetAlpha(uint Type);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetBoolean", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlGetBoolean(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetBooleanv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlGetBooleanv(uint Mode, byte* Param);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* IlGetData();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetDXTCData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlGetDXTCData(__IntPtr Buffer, uint BufferSize, uint DXTCFormat);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlGetError();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetInteger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IlGetInteger(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetIntegerv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlGetIntegerv(uint Mode, int* Param);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetLumpPos", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlGetLumpPos();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetPalette", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* IlGetPalette();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilGetString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IlGetString(uint StringName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilHint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlHint(uint Target, uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilInvertSurfaceDxtcDataAlpha", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlInvertSurfaceDxtcDataAlpha();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilInit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlInit();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilImageToDxtcData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlImageToDxtcData(uint Format);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilIsDisabled", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlIsDisabled(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilIsEnabled", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlIsEnabled(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilIsImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlIsImage(uint Image);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilIsValid", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlIsValid(uint Type, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilIsValidF", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlIsValidF(uint Type, __IntPtr File);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilIsValidL", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlIsValidL(uint Type, __IntPtr Lump, uint Size);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilKeyColour", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlKeyColour(float Red, float Green, float Blue, float Alpha);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilLoad", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlLoad(uint Type, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilLoadF", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlLoadF(uint Type, __IntPtr File);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilLoadImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlLoadImage([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilLoadL", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlLoadL(uint Type, __IntPtr Lump, uint Size);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilLoadPal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlLoadPal([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilModAlpha", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlModAlpha(double AlphaValue);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilOriginFunc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlOriginFunc(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilOverlayImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlOverlayImage(uint Source, int XCoord, int YCoord, int ZCoord);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilPopAttrib", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlPopAttrib();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilPushAttrib", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlPushAttrib(uint Bits);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRegisterFormat", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlRegisterFormat(uint Format);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRegisterLoad", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlRegisterLoad([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Ext, __IntPtr Load);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRegisterMipNum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlRegisterMipNum(uint Num);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRegisterNumFaces", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlRegisterNumFaces(uint Num);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRegisterNumImages", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlRegisterNumImages(uint Num);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRegisterOrigin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlRegisterOrigin(uint Origin);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRegisterPal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlRegisterPal(__IntPtr Pal, uint Size, uint Type);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRegisterSave", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlRegisterSave([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Ext, __IntPtr Save);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRegisterType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlRegisterType(uint Type);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRemoveLoad", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlRemoveLoad([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Ext);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilRemoveSave", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlRemoveSave([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string Ext);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilResetMemory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlResetMemory();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilResetRead", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlResetRead();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilResetWrite", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlResetWrite();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSave", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlSave(uint Type, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSaveF", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlSaveF(uint Type, __IntPtr File);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSaveImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlSaveImage([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSaveL", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlSaveL(uint Type, __IntPtr Lump, uint Size);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSavePal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlSavePal([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetAlpha", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlSetAlpha(double AlphaValue);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlSetData(__IntPtr Data);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetDuration", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlSetDuration(uint Duration);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetInteger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlSetInteger(uint Mode, int Param);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetMemory", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlSetMemory(__IntPtr _0, __IntPtr _1);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetPixels", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlSetPixels(int XOff, int YOff, int ZOff, uint Width, uint Height, uint Depth, uint Format, uint Type, __IntPtr Data);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetRead", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlSetRead(__IntPtr _0, __IntPtr _1, __IntPtr _2, __IntPtr _3, __IntPtr _4, __IntPtr _5, __IntPtr _6);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlSetString(uint Mode, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string String);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSetWrite", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlSetWrite(__IntPtr _0, __IntPtr _1, __IntPtr _2, __IntPtr _3, __IntPtr _4, __IntPtr _5);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilShutDown", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlShutDown();

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSurfaceToDxtcData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlSurfaceToDxtcData(uint Format);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilTexImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlTexImage(uint Width, uint Height, uint Depth, byte NumChannels, uint Format, uint Type, __IntPtr Data);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilTexImageDxtc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlTexImageDxtc(int w, int h, int d, uint DxtFormat, byte* data);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilTypeFromExt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlTypeFromExt1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilTypeFunc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlTypeFunc(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilLoadData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlLoadData([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName, uint Width, uint Height, uint Depth, byte Bpp);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilLoadDataF", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlLoadDataF(__IntPtr File, uint Width, uint Height, uint Depth, byte Bpp);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilLoadDataL", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlLoadDataL(__IntPtr Lump, uint Size, uint Width, uint Height, uint Depth, byte Bpp);

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "ilSaveData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlSaveData([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);
        }

        public static byte IlActiveFace(uint Number)
        {
            var __ret = __Internal.IlActiveFace(Number);
            return __ret;
        }

        public static byte IlActiveImage(uint Number)
        {
            var __ret = __Internal.IlActiveImage(Number);
            return __ret;
        }

        public static byte IlActiveLayer(uint Number)
        {
            var __ret = __Internal.IlActiveLayer(Number);
            return __ret;
        }

        public static byte IlActiveMipmap(uint Number)
        {
            var __ret = __Internal.IlActiveMipmap(Number);
            return __ret;
        }

        public static byte IlApplyPal(string FileName)
        {
            var __ret = __Internal.IlApplyPal(FileName);
            return __ret;
        }

        public static byte IlApplyProfile(sbyte* InProfile, sbyte* OutProfile)
        {
            var __ret = __Internal.IlApplyProfile(InProfile, OutProfile);
            return __ret;
        }

        public static void IlBindImage(uint Image)
        {
            __Internal.IlBindImage(Image);
        }

        public static byte IlBlit(uint Source, int DestX, int DestY, int DestZ, uint SrcX, uint SrcY, uint SrcZ, uint Width, uint Height, uint Depth)
        {
            var __ret = __Internal.IlBlit(Source, DestX, DestY, DestZ, SrcX, SrcY, SrcZ, Width, Height, Depth);
            return __ret;
        }

        public static byte IlClampNTSC()
        {
            var __ret = __Internal.IlClampNTSC();
            return __ret;
        }

        public static void IlClearColour(float Red, float Green, float Blue, float Alpha)
        {
            __Internal.IlClearColour(Red, Green, Blue, Alpha);
        }

        public static byte IlClearImage()
        {
            var __ret = __Internal.IlClearImage();
            return __ret;
        }

        public static uint IlCloneCurImage()
        {
            var __ret = __Internal.IlCloneCurImage();
            return __ret;
        }

        public static byte* IlCompressDXT(byte* Data, uint Width, uint Height, uint Depth, uint DXTCFormat, ref uint DXTCSize)
        {
            fixed (uint* __DXTCSize5 = &DXTCSize)
            {
                var __arg5 = __DXTCSize5;
                var __ret = __Internal.IlCompressDXT(Data, Width, Height, Depth, DXTCFormat, __arg5);
                return __ret;
            }
        }

        public static byte IlCompressFunc(uint Mode)
        {
            var __ret = __Internal.IlCompressFunc(Mode);
            return __ret;
        }

        public static byte IlConvertImage(uint DestFormat, uint DestType)
        {
            var __ret = __Internal.IlConvertImage(DestFormat, DestType);
            return __ret;
        }

        public static byte IlConvertPal(uint DestFormat)
        {
            var __ret = __Internal.IlConvertPal(DestFormat);
            return __ret;
        }

        public static byte IlCopyImage(uint Src)
        {
            var __ret = __Internal.IlCopyImage(Src);
            return __ret;
        }

        public static uint IlCopyPixels(uint XOff, uint YOff, uint ZOff, uint Width, uint Height, uint Depth, uint Format, uint Type, __IntPtr Data)
        {
            var __ret = __Internal.IlCopyPixels(XOff, YOff, ZOff, Width, Height, Depth, Format, Type, Data);
            return __ret;
        }

        public static uint IlCreateSubImage(uint Type, uint Num)
        {
            var __ret = __Internal.IlCreateSubImage(Type, Num);
            return __ret;
        }

        public static byte IlDefaultImage()
        {
            var __ret = __Internal.IlDefaultImage();
            return __ret;
        }

        public static void IlDeleteImage(uint Num)
        {
            __Internal.IlDeleteImage(Num);
        }

        public static void IlDeleteImages(ulong Num, ref uint Images)
        {
            fixed (uint* __Images1 = &Images)
            {
                var __arg1 = __Images1;
                __Internal.IlDeleteImages(Num, __arg1);
            }
        }

        public static uint IlDetermineType(string FileName)
        {
            var __ret = __Internal.IlDetermineType(FileName);
            return __ret;
        }

        public static uint IlDetermineTypeF(__IntPtr File)
        {
            var __ret = __Internal.IlDetermineTypeF(File);
            return __ret;
        }

        public static uint IlDetermineTypeL(__IntPtr Lump, uint Size)
        {
            var __ret = __Internal.IlDetermineTypeL(Lump, Size);
            return __ret;
        }

        public static byte IlDisable(uint Mode)
        {
            var __ret = __Internal.IlDisable(Mode);
            return __ret;
        }

        public static byte IlDxtcDataToImage()
        {
            var __ret = __Internal.IlDxtcDataToImage();
            return __ret;
        }

        public static byte IlDxtcDataToSurface()
        {
            var __ret = __Internal.IlDxtcDataToSurface();
            return __ret;
        }

        public static byte IlEnable(uint Mode)
        {
            var __ret = __Internal.IlEnable(Mode);
            return __ret;
        }

        public static void IlFlipSurfaceDxtcData()
        {
            __Internal.IlFlipSurfaceDxtcData();
        }

        public static byte IlFormatFunc(uint Mode)
        {
            var __ret = __Internal.IlFormatFunc(Mode);
            return __ret;
        }

        public static void IlGenImages(ulong Num, ref uint Images)
        {
            fixed (uint* __Images1 = &Images)
            {
                var __arg1 = __Images1;
                __Internal.IlGenImages(Num, __arg1);
            }
        }

        public static uint IlGenImage()
        {
            var __ret = __Internal.IlGenImage();
            return __ret;
        }

        public static byte* IlGetAlpha(uint Type)
        {
            var __ret = __Internal.IlGetAlpha(Type);
            return __ret;
        }

        public static byte IlGetBoolean(uint Mode)
        {
            var __ret = __Internal.IlGetBoolean(Mode);
            return __ret;
        }

        public static void IlGetBooleanv(uint Mode, byte* Param)
        {
            __Internal.IlGetBooleanv(Mode, Param);
        }

        public static byte* IlGetData()
        {
            var __ret = __Internal.IlGetData();
            return __ret;
        }

        public static uint IlGetDXTCData(__IntPtr Buffer, uint BufferSize, uint DXTCFormat)
        {
            var __ret = __Internal.IlGetDXTCData(Buffer, BufferSize, DXTCFormat);
            return __ret;
        }

        public static uint IlGetError()
        {
            var __ret = __Internal.IlGetError();
            return __ret;
        }

        public static int IlGetInteger(uint Mode)
        {
            var __ret = __Internal.IlGetInteger(Mode);
            return __ret;
        }

        public static void IlGetIntegerv(uint Mode, ref int Param)
        {
            fixed (int* __Param1 = &Param)
            {
                var __arg1 = __Param1;
                __Internal.IlGetIntegerv(Mode, __arg1);
            }
        }

        public static uint IlGetLumpPos()
        {
            var __ret = __Internal.IlGetLumpPos();
            return __ret;
        }

        public static byte* IlGetPalette()
        {
            var __ret = __Internal.IlGetPalette();
            return __ret;
        }

        public static string IlGetString(uint StringName)
        {
            var __ret = __Internal.IlGetString(StringName);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
        }

        public static void IlHint(uint Target, uint Mode)
        {
            __Internal.IlHint(Target, Mode);
        }

        public static byte IlInvertSurfaceDxtcDataAlpha()
        {
            var __ret = __Internal.IlInvertSurfaceDxtcDataAlpha();
            return __ret;
        }

        public static void IlInit()
        {
            __Internal.IlInit();
        }

        public static byte IlImageToDxtcData(uint Format)
        {
            var __ret = __Internal.IlImageToDxtcData(Format);
            return __ret;
        }

        public static byte IlIsDisabled(uint Mode)
        {
            var __ret = __Internal.IlIsDisabled(Mode);
            return __ret;
        }

        public static byte IlIsEnabled(uint Mode)
        {
            var __ret = __Internal.IlIsEnabled(Mode);
            return __ret;
        }

        public static byte IlIsImage(uint Image)
        {
            var __ret = __Internal.IlIsImage(Image);
            return __ret;
        }

        public static byte IlIsValid(uint Type, string FileName)
        {
            var __ret = __Internal.IlIsValid(Type, FileName);
            return __ret;
        }

        public static byte IlIsValidF(uint Type, __IntPtr File)
        {
            var __ret = __Internal.IlIsValidF(Type, File);
            return __ret;
        }

        public static byte IlIsValidL(uint Type, __IntPtr Lump, uint Size)
        {
            var __ret = __Internal.IlIsValidL(Type, Lump, Size);
            return __ret;
        }

        public static void IlKeyColour(float Red, float Green, float Blue, float Alpha)
        {
            __Internal.IlKeyColour(Red, Green, Blue, Alpha);
        }

        public static byte IlLoad(uint Type, string FileName)
        {
            var __ret = __Internal.IlLoad(Type, FileName);
            return __ret;
        }

        public static byte IlLoadF(uint Type, __IntPtr File)
        {
            var __ret = __Internal.IlLoadF(Type, File);
            return __ret;
        }

        public static byte IlLoadImage(string FileName)
        {
            var __ret = __Internal.IlLoadImage(FileName);
            return __ret;
        }

        public static byte IlLoadL(uint Type, __IntPtr Lump, uint Size)
        {
            var __ret = __Internal.IlLoadL(Type, Lump, Size);
            return __ret;
        }

        public static byte IlLoadPal(string FileName)
        {
            var __ret = __Internal.IlLoadPal(FileName);
            return __ret;
        }

        public static void IlModAlpha(double AlphaValue)
        {
            __Internal.IlModAlpha(AlphaValue);
        }

        public static byte IlOriginFunc(uint Mode)
        {
            var __ret = __Internal.IlOriginFunc(Mode);
            return __ret;
        }

        public static byte IlOverlayImage(uint Source, int XCoord, int YCoord, int ZCoord)
        {
            var __ret = __Internal.IlOverlayImage(Source, XCoord, YCoord, ZCoord);
            return __ret;
        }

        public static void IlPopAttrib()
        {
            __Internal.IlPopAttrib();
        }

        public static void IlPushAttrib(uint Bits)
        {
            __Internal.IlPushAttrib(Bits);
        }

        public static void IlRegisterFormat(uint Format)
        {
            __Internal.IlRegisterFormat(Format);
        }

        public static byte IlRegisterLoad(string Ext, global::DevIL.IL_LOADPROC Load)
        {
            var __arg1 = Load == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(Load);
            var __ret = __Internal.IlRegisterLoad(Ext, __arg1);
            return __ret;
        }

        public static byte IlRegisterMipNum(uint Num)
        {
            var __ret = __Internal.IlRegisterMipNum(Num);
            return __ret;
        }

        public static byte IlRegisterNumFaces(uint Num)
        {
            var __ret = __Internal.IlRegisterNumFaces(Num);
            return __ret;
        }

        public static byte IlRegisterNumImages(uint Num)
        {
            var __ret = __Internal.IlRegisterNumImages(Num);
            return __ret;
        }

        public static void IlRegisterOrigin(uint Origin)
        {
            __Internal.IlRegisterOrigin(Origin);
        }

        public static void IlRegisterPal(__IntPtr Pal, uint Size, uint Type)
        {
            __Internal.IlRegisterPal(Pal, Size, Type);
        }

        public static byte IlRegisterSave(string Ext, global::DevIL.IL_SAVEPROC Save)
        {
            var __arg1 = Save == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(Save);
            var __ret = __Internal.IlRegisterSave(Ext, __arg1);
            return __ret;
        }

        public static void IlRegisterType(uint Type)
        {
            __Internal.IlRegisterType(Type);
        }

        public static byte IlRemoveLoad(string Ext)
        {
            var __ret = __Internal.IlRemoveLoad(Ext);
            return __ret;
        }

        public static byte IlRemoveSave(string Ext)
        {
            var __ret = __Internal.IlRemoveSave(Ext);
            return __ret;
        }

        public static void IlResetMemory()
        {
            __Internal.IlResetMemory();
        }

        public static void IlResetRead()
        {
            __Internal.IlResetRead();
        }

        public static void IlResetWrite()
        {
            __Internal.IlResetWrite();
        }

        public static byte IlSave(uint Type, string FileName)
        {
            var __ret = __Internal.IlSave(Type, FileName);
            return __ret;
        }

        public static uint IlSaveF(uint Type, __IntPtr File)
        {
            var __ret = __Internal.IlSaveF(Type, File);
            return __ret;
        }

        public static byte IlSaveImage(string FileName)
        {
            var __ret = __Internal.IlSaveImage(FileName);
            return __ret;
        }

        public static uint IlSaveL(uint Type, __IntPtr Lump, uint Size)
        {
            var __ret = __Internal.IlSaveL(Type, Lump, Size);
            return __ret;
        }

        public static byte IlSavePal(string FileName)
        {
            var __ret = __Internal.IlSavePal(FileName);
            return __ret;
        }

        public static byte IlSetAlpha(double AlphaValue)
        {
            var __ret = __Internal.IlSetAlpha(AlphaValue);
            return __ret;
        }

        public static byte IlSetData(__IntPtr Data)
        {
            var __ret = __Internal.IlSetData(Data);
            return __ret;
        }

        public static byte IlSetDuration(uint Duration)
        {
            var __ret = __Internal.IlSetDuration(Duration);
            return __ret;
        }

        public static void IlSetInteger(uint Mode, int Param)
        {
            __Internal.IlSetInteger(Mode, Param);
        }

        public static void IlSetMemory(global::DevIL.MAlloc _0, global::DevIL.MFree _1)
        {
            var __arg0 = _0 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_0);
            var __arg1 = _1 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_1);
            __Internal.IlSetMemory(__arg0, __arg1);
        }

        public static void IlSetPixels(int XOff, int YOff, int ZOff, uint Width, uint Height, uint Depth, uint Format, uint Type, __IntPtr Data)
        {
            __Internal.IlSetPixels(XOff, YOff, ZOff, Width, Height, Depth, Format, Type, Data);
        }

        public static void IlSetRead(global::DevIL.FOpenRProc _0, global::DevIL.FCloseRProc _1, global::DevIL.FEofProc _2, global::DevIL.FGetcProc _3, global::DevIL.FReadProc _4, global::DevIL.FSeekRProc _5, global::DevIL.FTellRProc _6)
        {
            var __arg0 = _0 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_0);
            var __arg1 = _1 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_1);
            var __arg2 = _2 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_2);
            var __arg3 = _3 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_3);
            var __arg4 = _4 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_4);
            var __arg5 = _5 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_5);
            var __arg6 = _6 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_6);
            __Internal.IlSetRead(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
        }

        public static void IlSetString(uint Mode, string String)
        {
            __Internal.IlSetString(Mode, String);
        }

        public static void IlSetWrite(global::DevIL.FOpenWProc _0, global::DevIL.FCloseWProc _1, global::DevIL.FPutcProc _2, global::DevIL.FSeekWProc _3, global::DevIL.FTellWProc _4, global::DevIL.FWriteProc _5)
        {
            var __arg0 = _0 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_0);
            var __arg1 = _1 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_1);
            var __arg2 = _2 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_2);
            var __arg3 = _3 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_3);
            var __arg4 = _4 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_4);
            var __arg5 = _5 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_5);
            __Internal.IlSetWrite(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
        }

        public static void IlShutDown()
        {
            __Internal.IlShutDown();
        }

        public static byte IlSurfaceToDxtcData(uint Format)
        {
            var __ret = __Internal.IlSurfaceToDxtcData(Format);
            return __ret;
        }

        public static byte IlTexImage(uint Width, uint Height, uint Depth, byte NumChannels, uint Format, uint Type, __IntPtr Data)
        {
            var __ret = __Internal.IlTexImage(Width, Height, Depth, NumChannels, Format, Type, Data);
            return __ret;
        }

        public static byte IlTexImageDxtc(int w, int h, int d, uint DxtFormat, byte* data)
        {
            var __ret = __Internal.IlTexImageDxtc(w, h, d, DxtFormat, data);
            return __ret;
        }

        public static uint IlTypeFromExt1(string FileName)
        {
            var __ret = __Internal.IlTypeFromExt1(FileName);
            return __ret;
        }

        public static byte IlTypeFunc(uint Mode)
        {
            var __ret = __Internal.IlTypeFunc(Mode);
            return __ret;
        }

        public static byte IlLoadData(string FileName, uint Width, uint Height, uint Depth, byte Bpp)
        {
            var __ret = __Internal.IlLoadData(FileName, Width, Height, Depth, Bpp);
            return __ret;
        }

        public static byte IlLoadDataF(__IntPtr File, uint Width, uint Height, uint Depth, byte Bpp)
        {
            var __ret = __Internal.IlLoadDataF(File, Width, Height, Depth, Bpp);
            return __ret;
        }

        public static byte IlLoadDataL(__IntPtr Lump, uint Size, uint Width, uint Height, uint Depth, byte Bpp)
        {
            var __ret = __Internal.IlLoadDataL(Lump, Size, Width, Height, Depth, Bpp);
            return __ret;
        }

        public static byte IlSaveData(string FileName)
        {
            var __ret = __Internal.IlSaveData(FileName);
            return __ret;
        }
    }

    public unsafe partial class ILinfo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 80)]
        public partial struct __Internal
        {
            internal uint Id;
            internal __IntPtr Data;
            internal uint Width;
            internal uint Height;
            internal uint Depth;
            internal byte Bpp;
            internal uint SizeOfData;
            internal uint Format;
            internal uint Type;
            internal uint Origin;
            internal __IntPtr Palette;
            internal uint PalType;
            internal uint PalSize;
            internal uint CubeFlags;
            internal uint NumNext;
            internal uint NumMips;
            internal uint NumLayers;

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "??0ILinfo@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DevIL.ILinfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DevIL.ILinfo>();

        protected bool __ownsNativeInstance;

        internal static ILinfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new ILinfo(native.ToPointer(), skipVTables);
        }

        internal static ILinfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (ILinfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static ILinfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ILinfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ILinfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ILinfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public ILinfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DevIL.ILinfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ILinfo(global::DevIL.ILinfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DevIL.ILinfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DevIL.ILinfo.__Internal*) __Instance) = *((global::DevIL.ILinfo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Id
        {
            get
            {
                return ((__Internal*)__Instance)->Id;
            }

            set
            {
                ((__Internal*)__Instance)->Id = value;
            }
        }

        public byte* Data
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->Data;
            }

            set
            {
                ((__Internal*)__Instance)->Data = (__IntPtr) value;
            }
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->Width;
            }

            set
            {
                ((__Internal*)__Instance)->Width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->Height;
            }

            set
            {
                ((__Internal*)__Instance)->Height = value;
            }
        }

        public uint Depth
        {
            get
            {
                return ((__Internal*)__Instance)->Depth;
            }

            set
            {
                ((__Internal*)__Instance)->Depth = value;
            }
        }

        public byte Bpp
        {
            get
            {
                return ((__Internal*)__Instance)->Bpp;
            }

            set
            {
                ((__Internal*)__Instance)->Bpp = value;
            }
        }

        public uint SizeOfData
        {
            get
            {
                return ((__Internal*)__Instance)->SizeOfData;
            }

            set
            {
                ((__Internal*)__Instance)->SizeOfData = value;
            }
        }

        public uint Format
        {
            get
            {
                return ((__Internal*)__Instance)->Format;
            }

            set
            {
                ((__Internal*)__Instance)->Format = value;
            }
        }

        public uint Type
        {
            get
            {
                return ((__Internal*)__Instance)->Type;
            }

            set
            {
                ((__Internal*)__Instance)->Type = value;
            }
        }

        public uint Origin
        {
            get
            {
                return ((__Internal*)__Instance)->Origin;
            }

            set
            {
                ((__Internal*)__Instance)->Origin = value;
            }
        }

        public byte* Palette
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->Palette;
            }

            set
            {
                ((__Internal*)__Instance)->Palette = (__IntPtr) value;
            }
        }

        public uint PalType
        {
            get
            {
                return ((__Internal*)__Instance)->PalType;
            }

            set
            {
                ((__Internal*)__Instance)->PalType = value;
            }
        }

        public uint PalSize
        {
            get
            {
                return ((__Internal*)__Instance)->PalSize;
            }

            set
            {
                ((__Internal*)__Instance)->PalSize = value;
            }
        }

        public uint CubeFlags
        {
            get
            {
                return ((__Internal*)__Instance)->CubeFlags;
            }

            set
            {
                ((__Internal*)__Instance)->CubeFlags = value;
            }
        }

        public uint NumNext
        {
            get
            {
                return ((__Internal*)__Instance)->NumNext;
            }

            set
            {
                ((__Internal*)__Instance)->NumNext = value;
            }
        }

        public uint NumMips
        {
            get
            {
                return ((__Internal*)__Instance)->NumMips;
            }

            set
            {
                ((__Internal*)__Instance)->NumMips = value;
            }
        }

        public uint NumLayers
        {
            get
            {
                return ((__Internal*)__Instance)->NumLayers;
            }

            set
            {
                ((__Internal*)__Instance)->NumLayers = value;
            }
        }
    }

    public unsafe partial class ILpointf : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal float x;
            internal float y;

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "??0ILpointf@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DevIL.ILpointf> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DevIL.ILpointf>();

        protected bool __ownsNativeInstance;

        internal static ILpointf __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new ILpointf(native.ToPointer(), skipVTables);
        }

        internal static ILpointf __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (ILpointf)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static ILpointf __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ILpointf(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ILpointf(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ILpointf(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public ILpointf()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DevIL.ILpointf.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ILpointf(global::DevIL.ILpointf _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DevIL.ILpointf.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DevIL.ILpointf.__Internal*) __Instance) = *((global::DevIL.ILpointf.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float X
        {
            get
            {
                return ((__Internal*)__Instance)->x;
            }

            set
            {
                ((__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((__Internal*)__Instance)->y;
            }

            set
            {
                ((__Internal*)__Instance)->y = value;
            }
        }
    }

    public unsafe partial class ILpointi : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal int x;
            internal int y;

            [SuppressUnmanagedCodeSecurity, DllImport("DevIL", EntryPoint = "??0ILpointi@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DevIL.ILpointi> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DevIL.ILpointi>();

        protected bool __ownsNativeInstance;

        internal static ILpointi __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new ILpointi(native.ToPointer(), skipVTables);
        }

        internal static ILpointi __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (ILpointi)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static ILpointi __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ILpointi(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ILpointi(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ILpointi(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public ILpointi()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DevIL.ILpointi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ILpointi(global::DevIL.ILpointi _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DevIL.ILpointi.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DevIL.ILpointi.__Internal*) __Instance) = *((global::DevIL.ILpointi.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int X
        {
            get
            {
                return ((__Internal*)__Instance)->x;
            }

            set
            {
                ((__Internal*)__Instance)->x = value;
            }
        }

        public int Y
        {
            get
            {
                return ((__Internal*)__Instance)->y;
            }

            set
            {
                ((__Internal*)__Instance)->y = value;
            }
        }
    }

    public unsafe partial class ilu
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluAlienify", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluAlienify();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluBlurAvg", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluBlurAvg(uint Iter);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluBlurGaussian", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluBlurGaussian(uint Iter);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluBuildMipmaps", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluBuildMipmaps();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluColoursUsed", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IluColoursUsed();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluCompareImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluCompareImage(uint Comp);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluContrast", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluContrast(float Contrast);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluCrop", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluCrop(uint XOff, uint YOff, uint ZOff, uint Width, uint Height, uint Depth);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluDeleteImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IluDeleteImage(uint Id);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluEdgeDetectE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluEdgeDetectE();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluEdgeDetectP", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluEdgeDetectP();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluEdgeDetectS", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluEdgeDetectS();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluEmboss", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluEmboss();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluEnlargeCanvas", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluEnlargeCanvas(uint Width, uint Height, uint Depth);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluEnlargeImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluEnlargeImage(float XDim, float YDim, float ZDim);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluEqualize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluEqualize();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluEqualize2", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluEqualize2();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluErrorString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr IluErrorString(uint Error);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluConvolution", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluConvolution(int* matrix, int scale, int bias);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluFlipImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluFlipImage();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluGammaCorrect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluGammaCorrect(float Gamma);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluGenImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IluGenImage();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluGetImageInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IluGetImageInfo(__IntPtr Info);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluGetInteger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IluGetInteger(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluGetIntegerv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IluGetIntegerv(uint Mode, int* Param);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluGetString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* IluGetString(uint StringName);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluImageParameter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IluImageParameter(uint PName, uint Param);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluInit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IluInit();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluInvertAlpha", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluInvertAlpha();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluLoadImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IluLoadImage([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluMirror", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluMirror();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluNegative", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluNegative();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluNoisify", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluNoisify(float Tolerance);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluPixelize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluPixelize(uint PixSize);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluRegionfv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IluRegionfv(__IntPtr Points, uint n);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluRegioniv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IluRegioniv(__IntPtr Points, uint n);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluReplaceColour", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluReplaceColour(byte Red, byte Green, byte Blue, float Tolerance);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluRotate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluRotate(float Angle);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluRotate3D", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluRotate3D(float x, float y, float z, float Angle);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluSaturate1f", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluSaturate1f(float Saturation);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluSaturate4f", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluSaturate4f(float r, float g, float b, float Saturation);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluScale", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluScale(uint Width, uint Height, uint Depth);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluScaleAlpha", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluScaleAlpha(float scale);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluScaleColours", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluScaleColours(float r, float g, float b);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluSepia", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluSepia();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluSetLanguage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluSetLanguage(uint Language);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluSharpen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluSharpen(float Factor, uint Iter);

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluSwapColours", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluSwapColours();

            [SuppressUnmanagedCodeSecurity, DllImport("ILU", EntryPoint = "iluWave", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IluWave(float Angle);
        }

        public static byte IluAlienify()
        {
            var __ret = __Internal.IluAlienify();
            return __ret;
        }

        public static byte IluBlurAvg(uint Iter)
        {
            var __ret = __Internal.IluBlurAvg(Iter);
            return __ret;
        }

        public static byte IluBlurGaussian(uint Iter)
        {
            var __ret = __Internal.IluBlurGaussian(Iter);
            return __ret;
        }

        public static byte IluBuildMipmaps()
        {
            var __ret = __Internal.IluBuildMipmaps();
            return __ret;
        }

        public static uint IluColoursUsed()
        {
            var __ret = __Internal.IluColoursUsed();
            return __ret;
        }

        public static byte IluCompareImage(uint Comp)
        {
            var __ret = __Internal.IluCompareImage(Comp);
            return __ret;
        }

        public static byte IluContrast(float Contrast)
        {
            var __ret = __Internal.IluContrast(Contrast);
            return __ret;
        }

        public static byte IluCrop(uint XOff, uint YOff, uint ZOff, uint Width, uint Height, uint Depth)
        {
            var __ret = __Internal.IluCrop(XOff, YOff, ZOff, Width, Height, Depth);
            return __ret;
        }

        public static void IluDeleteImage(uint Id)
        {
            __Internal.IluDeleteImage(Id);
        }

        public static byte IluEdgeDetectE()
        {
            var __ret = __Internal.IluEdgeDetectE();
            return __ret;
        }

        public static byte IluEdgeDetectP()
        {
            var __ret = __Internal.IluEdgeDetectP();
            return __ret;
        }

        public static byte IluEdgeDetectS()
        {
            var __ret = __Internal.IluEdgeDetectS();
            return __ret;
        }

        public static byte IluEmboss()
        {
            var __ret = __Internal.IluEmboss();
            return __ret;
        }

        public static byte IluEnlargeCanvas(uint Width, uint Height, uint Depth)
        {
            var __ret = __Internal.IluEnlargeCanvas(Width, Height, Depth);
            return __ret;
        }

        public static byte IluEnlargeImage(float XDim, float YDim, float ZDim)
        {
            var __ret = __Internal.IluEnlargeImage(XDim, YDim, ZDim);
            return __ret;
        }

        public static byte IluEqualize()
        {
            var __ret = __Internal.IluEqualize();
            return __ret;
        }

        public static byte IluEqualize2()
        {
            var __ret = __Internal.IluEqualize2();
            return __ret;
        }

        public static string IluErrorString(uint Error)
        {
            var __ret = __Internal.IluErrorString(Error);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
        }

        public static byte IluConvolution(ref int matrix, int scale, int bias)
        {
            fixed (int* __matrix0 = &matrix)
            {
                var __arg0 = __matrix0;
                var __ret = __Internal.IluConvolution(__arg0, scale, bias);
                return __ret;
            }
        }

        public static byte IluFlipImage()
        {
            var __ret = __Internal.IluFlipImage();
            return __ret;
        }

        public static byte IluGammaCorrect(float Gamma)
        {
            var __ret = __Internal.IluGammaCorrect(Gamma);
            return __ret;
        }

        public static uint IluGenImage()
        {
            var __ret = __Internal.IluGenImage();
            return __ret;
        }

        public static void IluGetImageInfo(global::DevIL.ILinfo Info)
        {
            var __arg0 = Info is null ? __IntPtr.Zero : Info.__Instance;
            __Internal.IluGetImageInfo(__arg0);
        }

        public static int IluGetInteger(uint Mode)
        {
            var __ret = __Internal.IluGetInteger(Mode);
            return __ret;
        }

        public static void IluGetIntegerv(uint Mode, ref int Param)
        {
            fixed (int* __Param1 = &Param)
            {
                var __arg1 = __Param1;
                __Internal.IluGetIntegerv(Mode, __arg1);
            }
        }

        public static sbyte* IluGetString(uint StringName)
        {
            var __ret = __Internal.IluGetString(StringName);
            return __ret;
        }

        public static void IluImageParameter(uint PName, uint Param)
        {
            __Internal.IluImageParameter(PName, Param);
        }

        public static void IluInit()
        {
            __Internal.IluInit();
        }

        public static byte IluInvertAlpha()
        {
            var __ret = __Internal.IluInvertAlpha();
            return __ret;
        }

        public static uint IluLoadImage(string FileName)
        {
            var __ret = __Internal.IluLoadImage(FileName);
            return __ret;
        }

        public static byte IluMirror()
        {
            var __ret = __Internal.IluMirror();
            return __ret;
        }

        public static byte IluNegative()
        {
            var __ret = __Internal.IluNegative();
            return __ret;
        }

        public static byte IluNoisify(float Tolerance)
        {
            var __ret = __Internal.IluNoisify(Tolerance);
            return __ret;
        }

        public static byte IluPixelize(uint PixSize)
        {
            var __ret = __Internal.IluPixelize(PixSize);
            return __ret;
        }

        public static void IluRegionfv(global::DevIL.ILpointf Points, uint n)
        {
            var __arg0 = Points is null ? __IntPtr.Zero : Points.__Instance;
            __Internal.IluRegionfv(__arg0, n);
        }

        public static void IluRegioniv(global::DevIL.ILpointi Points, uint n)
        {
            var __arg0 = Points is null ? __IntPtr.Zero : Points.__Instance;
            __Internal.IluRegioniv(__arg0, n);
        }

        public static byte IluReplaceColour(byte Red, byte Green, byte Blue, float Tolerance)
        {
            var __ret = __Internal.IluReplaceColour(Red, Green, Blue, Tolerance);
            return __ret;
        }

        public static byte IluRotate(float Angle)
        {
            var __ret = __Internal.IluRotate(Angle);
            return __ret;
        }

        public static byte IluRotate3D(float x, float y, float z, float Angle)
        {
            var __ret = __Internal.IluRotate3D(x, y, z, Angle);
            return __ret;
        }

        public static byte IluSaturate1f(float Saturation)
        {
            var __ret = __Internal.IluSaturate1f(Saturation);
            return __ret;
        }

        public static byte IluSaturate4f(float r, float g, float b, float Saturation)
        {
            var __ret = __Internal.IluSaturate4f(r, g, b, Saturation);
            return __ret;
        }

        public static byte IluScale(uint Width, uint Height, uint Depth)
        {
            var __ret = __Internal.IluScale(Width, Height, Depth);
            return __ret;
        }

        public static byte IluScaleAlpha(float scale)
        {
            var __ret = __Internal.IluScaleAlpha(scale);
            return __ret;
        }

        public static byte IluScaleColours(float r, float g, float b)
        {
            var __ret = __Internal.IluScaleColours(r, g, b);
            return __ret;
        }

        public static byte IluSepia()
        {
            var __ret = __Internal.IluSepia();
            return __ret;
        }

        public static byte IluSetLanguage(uint Language)
        {
            var __ret = __Internal.IluSetLanguage(Language);
            return __ret;
        }

        public static byte IluSharpen(float Factor, uint Iter)
        {
            var __ret = __Internal.IluSharpen(Factor, Iter);
            return __ret;
        }

        public static byte IluSwapColours()
        {
            var __ret = __Internal.IluSwapColours();
            return __ret;
        }

        public static byte IluWave(float Angle)
        {
            var __ret = __Internal.IluWave(Angle);
            return __ret;
        }
    }

    public unsafe partial class ilut
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutDisable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutDisable(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutEnable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutEnable(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGetBoolean", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGetBoolean(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGetBooleanv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlutGetBooleanv(uint Mode, byte* Param);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGetInteger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IlutGetInteger(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGetIntegerv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlutGetIntegerv(uint Mode, int* Param);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGetString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* IlutGetString(uint StringName);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutInit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlutInit();

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutIsDisabled", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutIsDisabled(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutIsEnabled", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutIsEnabled(uint Mode);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutPopAttrib", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlutPopAttrib();

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutPushAttrib", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlutPushAttrib(uint Bits);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutSetInteger", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlutSetInteger(uint Mode, int Param);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutRenderer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutRenderer(uint Renderer);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLBindTexImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlutGLBindTexImage();

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLBindMipmaps", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlutGLBindMipmaps();

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLBuildMipmaps", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLBuildMipmaps();

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLLoadImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint IlutGLLoadImage(sbyte* FileName);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLScreen", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLScreen();

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLScreenie", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLScreenie();

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLSaveImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLSaveImage(sbyte* FileName, uint TexID);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLSubTex2D", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLSubTex2D(uint TexID, uint XOff, uint YOff);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLSubTex3D", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLSubTex3D(uint TexID, uint XOff, uint YOff, uint ZOff);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLSetTex2D", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLSetTex2D(uint TexID);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLSetTex3D", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLSetTex3D(uint TexID);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLTexImage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLTexImage(uint Level);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLSubTex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLSubTex(uint TexID, uint XOff, uint YOff);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGLSetTex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGLSetTex(uint TexID);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutFreePaddedData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IlutFreePaddedData(byte* Data);

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGetPaddedData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* IlutGetPaddedData();

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutGetWinClipboard", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutGetWinClipboard();

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutSetWinClipboard", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutSetWinClipboard();

            [SuppressUnmanagedCodeSecurity, DllImport("ILUT", EntryPoint = "ilutWinLoadUrl", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte IlutWinLoadUrl(sbyte* Url);
        }

        public static byte IlutDisable(uint Mode)
        {
            var __ret = __Internal.IlutDisable(Mode);
            return __ret;
        }

        public static byte IlutEnable(uint Mode)
        {
            var __ret = __Internal.IlutEnable(Mode);
            return __ret;
        }

        public static byte IlutGetBoolean(uint Mode)
        {
            var __ret = __Internal.IlutGetBoolean(Mode);
            return __ret;
        }

        public static void IlutGetBooleanv(uint Mode, byte* Param)
        {
            __Internal.IlutGetBooleanv(Mode, Param);
        }

        public static int IlutGetInteger(uint Mode)
        {
            var __ret = __Internal.IlutGetInteger(Mode);
            return __ret;
        }

        public static void IlutGetIntegerv(uint Mode, ref int Param)
        {
            fixed (int* __Param1 = &Param)
            {
                var __arg1 = __Param1;
                __Internal.IlutGetIntegerv(Mode, __arg1);
            }
        }

        public static sbyte* IlutGetString(uint StringName)
        {
            var __ret = __Internal.IlutGetString(StringName);
            return __ret;
        }

        public static void IlutInit()
        {
            __Internal.IlutInit();
        }

        public static byte IlutIsDisabled(uint Mode)
        {
            var __ret = __Internal.IlutIsDisabled(Mode);
            return __ret;
        }

        public static byte IlutIsEnabled(uint Mode)
        {
            var __ret = __Internal.IlutIsEnabled(Mode);
            return __ret;
        }

        public static void IlutPopAttrib()
        {
            __Internal.IlutPopAttrib();
        }

        public static void IlutPushAttrib(uint Bits)
        {
            __Internal.IlutPushAttrib(Bits);
        }

        public static void IlutSetInteger(uint Mode, int Param)
        {
            __Internal.IlutSetInteger(Mode, Param);
        }

        public static byte IlutRenderer(uint Renderer)
        {
            var __ret = __Internal.IlutRenderer(Renderer);
            return __ret;
        }

        public static uint IlutGLBindTexImage()
        {
            var __ret = __Internal.IlutGLBindTexImage();
            return __ret;
        }

        public static uint IlutGLBindMipmaps()
        {
            var __ret = __Internal.IlutGLBindMipmaps();
            return __ret;
        }

        public static byte IlutGLBuildMipmaps()
        {
            var __ret = __Internal.IlutGLBuildMipmaps();
            return __ret;
        }

        public static uint IlutGLLoadImage(sbyte* FileName)
        {
            var __ret = __Internal.IlutGLLoadImage(FileName);
            return __ret;
        }

        public static byte IlutGLScreen()
        {
            var __ret = __Internal.IlutGLScreen();
            return __ret;
        }

        public static byte IlutGLScreenie()
        {
            var __ret = __Internal.IlutGLScreenie();
            return __ret;
        }

        public static byte IlutGLSaveImage(sbyte* FileName, uint TexID)
        {
            var __ret = __Internal.IlutGLSaveImage(FileName, TexID);
            return __ret;
        }

        public static byte IlutGLSubTex2D(uint TexID, uint XOff, uint YOff)
        {
            var __ret = __Internal.IlutGLSubTex2D(TexID, XOff, YOff);
            return __ret;
        }

        public static byte IlutGLSubTex3D(uint TexID, uint XOff, uint YOff, uint ZOff)
        {
            var __ret = __Internal.IlutGLSubTex3D(TexID, XOff, YOff, ZOff);
            return __ret;
        }

        public static byte IlutGLSetTex2D(uint TexID)
        {
            var __ret = __Internal.IlutGLSetTex2D(TexID);
            return __ret;
        }

        public static byte IlutGLSetTex3D(uint TexID)
        {
            var __ret = __Internal.IlutGLSetTex3D(TexID);
            return __ret;
        }

        public static byte IlutGLTexImage(uint Level)
        {
            var __ret = __Internal.IlutGLTexImage(Level);
            return __ret;
        }

        public static byte IlutGLSubTex(uint TexID, uint XOff, uint YOff)
        {
            var __ret = __Internal.IlutGLSubTex(TexID, XOff, YOff);
            return __ret;
        }

        public static byte IlutGLSetTex(uint TexID)
        {
            var __ret = __Internal.IlutGLSetTex(TexID);
            return __ret;
        }

        public static void IlutFreePaddedData(byte* Data)
        {
            __Internal.IlutFreePaddedData(Data);
        }

        public static byte* IlutGetPaddedData()
        {
            var __ret = __Internal.IlutGetPaddedData();
            return __ret;
        }

        public static byte IlutGetWinClipboard()
        {
            var __ret = __Internal.IlutGetWinClipboard();
            return __ret;
        }

        public static byte IlutSetWinClipboard()
        {
            var __ret = __Internal.IlutSetWinClipboard();
            return __ret;
        }

        public static byte IlutWinLoadUrl(sbyte* Url)
        {
            var __ret = __Internal.IlutWinLoadUrl(Url);
            return __ret;
        }
    }
}
